node('build-slave') {
    try {
        String ANSI_GREEN = "\u001B[32m"
        String ANSI_NORMAL = "\u001B[0m"
        String ANSI_BOLD = "\u001B[1m"
        String ANSI_RED = "\u001B[31m"
        String ANSI_YELLOW = "\u001B[33m"

        ansiColor('xterm') {
            stage('Checkout') {
                cleanWs()
                checkout scm
                commit_hash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                artifact_version = sh(script: "echo " + params.github_release_tag.split('/')[-1] + "_" + commit_hash + "_" + env.BUILD_NUMBER, returnStdout: true).trim()
                echo "artifact_version: "+ artifact_version
            }

            stage('Build') {
                sh """
                        mkdir sunbird_auth_1.0v
                        wget -q https://downloads.jboss.org/keycloak/7.0.1/keycloak-7.0.1.tar.gz
                        tar -xvf keycloak-7.0.1.tar.gz --strip 1 -C sunbird_auth_1.0v
                        mkdir -p sunbird_auth_1.0v/providers
                        mkdir -p sunbird_auth_1.0v/modules/system/layers/keycloak/org/postgresql/main
                        mkdir -p sunbird_auth_1.0v/themes/sunbird/login
                        wget https://jdbc.postgresql.org/download/postgresql-9.4.1212.jar
                        mv postgresql-9.4.1212.jar sunbird_auth_1.0v/modules/system/layers/keycloak/org/postgresql/main
                        cd keycloak/sms-provider
                        mvn package
                        cp target/keycloak-email-phone-autthenticator-1.0-SNAPSHOT.jar $WORKSPACE/sunbird_auth_1.0v/providers
                        cp -r templates/* $WORKSPACE/sunbird_auth_1.0v/themes/sunbird/login
                """
            }

            stage('ArchiveArtifacts') {
                sh """
                        mkdir keycloak_artifacts
                        zip -r keycloak_artifacts.zip:${artifact_version} sunbird_auth_1.0v
                    """
                archiveArtifacts artifacts: "keycloak_artifacts.zip:${artifact_version}", fingerprint: true, onlyIfSuccessful: true
                sh """echo {\\"artifact_name\\" : \\"keycloak_artifacts.zip\\", \\"artifact_version\\" : \\"${artifact_version}\\", \\"node_name\\" : \\"${env.NODE_NAME}\\"} > metadata.json"""
                archiveArtifacts "metadata.json"
                currentBuild.description = "${artifact_version}"
            }
        }

    }
    catch (err) {
        currentBuild.result = "FAILURE"
        throw err
    }

}
